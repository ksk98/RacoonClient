package com.bots.RaccoonClient.Views.Main;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.bots.RaccoonShared.Discord.Channel;
import com.bots.RaccoonShared.Discord.ServerChannels;

import javax.swing.*;
import java.awt.*;

public class MainView extends JFrame {
    private JPanel contentPanel;
    private JTabbedPane contentPanelTabs;
    private JTextPane messagesContentPane;
    private JTextArea sendMessageContentPane;
    private JComboBox<ServerChannels> messagesTabServerPickBox;
    private JComboBox<Channel> messagesTabChannelPickBox;
    private JButton sendMessageButton;
    private JTextPane logsContentPane;
    private JPanel messagesTab;
    private JPanel logsTab;
    private JScrollPane messagesScrollPane;
    private JScrollPane sendMessageScrollPane;
    private JScrollPane logsScrollPane;

    public MainView(String title) throws HeadlessException {
        super(title);
        setContentPane(contentPanel);
        setMinimumSize(new Dimension(850, 550));
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        pack();
    }

    public JComboBox<ServerChannels> getMessagesTabServerPickBox() {
        return messagesTabServerPickBox;
    }

    public JComboBox<Channel> getMessagesTabChannelPickBox() {
        return messagesTabChannelPickBox;
    }

    public JTextPane getLogsContentPane() {
        return logsContentPane;
    }

    public JTextPane getMessagesContentPane() {
        return messagesContentPane;
    }

    public JPanel getContentPanel() {
        return contentPanel;
    }

    public JTabbedPane getContentPanelTabs() {
        return contentPanelTabs;
    }

    public JTextArea getSendMessageContentPane() {
        return sendMessageContentPane;
    }

    public JButton getSendMessageButton() {
        return sendMessageButton;
    }

    public JPanel getMessagesTab() {
        return messagesTab;
    }

    public JPanel getLogsTab() {
        return logsTab;
    }

    public JScrollPane getMessagesScrollPane() {
        return messagesScrollPane;
    }

    public JScrollPane getSendMessageScrollPane() {
        return sendMessageScrollPane;
    }

    public JScrollPane getLogsScrollPane() {
        return logsScrollPane;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanelTabs = new JTabbedPane();
        contentPanel.add(contentPanelTabs, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(800, 500), null, null, 0, false));
        messagesTab = new JPanel();
        messagesTab.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPanelTabs.addTab("Messages", messagesTab);
        messagesTabServerPickBox = new JComboBox();
        messagesTab.add(messagesTabServerPickBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        messagesTabChannelPickBox = new JComboBox();
        messagesTab.add(messagesTabChannelPickBox, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sendMessageButton = new JButton();
        sendMessageButton.setText("Send");
        messagesTab.add(sendMessageButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        messagesScrollPane = new JScrollPane();
        messagesScrollPane.setHorizontalScrollBarPolicy(31);
        messagesTab.add(messagesScrollPane, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        messagesContentPane = new JTextPane();
        messagesContentPane.setEditable(false);
        messagesScrollPane.setViewportView(messagesContentPane);
        sendMessageScrollPane = new JScrollPane();
        sendMessageScrollPane.setHorizontalScrollBarPolicy(31);
        messagesTab.add(sendMessageScrollPane, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 50), new Dimension(-1, 50), null, 0, false));
        sendMessageContentPane = new JTextArea();
        sendMessageContentPane.setLineWrap(true);
        sendMessageContentPane.setWrapStyleWord(true);
        sendMessageScrollPane.setViewportView(sendMessageContentPane);
        logsTab = new JPanel();
        logsTab.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanelTabs.addTab("Logs", logsTab);
        logsScrollPane = new JScrollPane();
        logsScrollPane.setHorizontalScrollBarPolicy(31);
        logsTab.add(logsScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        logsContentPane = new JTextPane();
        logsContentPane.setEditable(false);
        logsScrollPane.setViewportView(logsContentPane);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }


}
